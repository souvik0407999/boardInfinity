{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","event","handleUserFormSubmit","name","type","placeholder","required","value","formData","username","onChange","handleFormChange","App","state","gitun","info","bind","preventDefault","axios","get","this","then","response","setState","data","login","JSON","stringify","undefined","catch","err","console","log","obj","target","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4QAsBeA,EArBF,SAACC,GACZ,OACF,0BAAMC,SAAU,SAACC,GAAD,OAAWF,EAAMG,qBAAqBD,KAChD,+BACE,sCACA,2BAAOE,KAAK,WACZC,KAAK,OACLC,YAAY,kBACZC,UAAQ,EACRC,MAAOR,EAAMS,SAASC,SACtBC,SAAUX,EAAMY,oBAGlB,6BACA,2BACEP,KAAK,SACLG,MAAM,cCsFCK,E,kDA/Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,cACPC,KAAM,GACNP,SAAU,CACRC,SAAU,KAGd,EAAKP,qBAAuB,EAAKA,qBAAqBc,KAA1B,gBAC5B,EAAKL,iBAAkB,EAAKA,iBAAiBK,KAAtB,gBAVX,E,iEAYKf,GAAQ,IAAD,OACxBA,EAAMgB,iBACNC,IAAMC,IAAI,gCAAgCC,KAAKP,MAAML,SAASC,UAC7DY,MAAK,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAC9BT,MAAOQ,EAASE,KAAKC,MACrBV,KAAOW,KAAKC,UAAUL,EAASE,UAAMI,EAAW,QAC9CC,OAAM,SAACC,GAAUC,QAAQC,IAAIF,Q,uCAEpB7B,GACb,IAAMgC,EAAMb,KAAKP,MAAML,SACvByB,EAAIhC,EAAMiC,OAAO/B,MAAQF,EAAMiC,OAAO3B,MACtCa,KAAKG,SAASU,K,+BAGd,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,qBAEF,uBAAGA,UAAU,aAAb,uBAGA,kBAAC,EAAD,CACE3B,SAAUY,KAAKP,MAAML,SACrBN,qBAAsBkB,KAAKlB,qBAC3BS,iBAAkBS,KAAKT,mBAEzB,2BAAG,yCACH,2BAAIS,KAAKP,MAAMC,OACf,2CACA,6BAAMM,KAAKP,MAAME,W,GA3CPqB,aC3CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.a7d281cc.chunk.js","sourcesContent":["import React from 'react';\r\nconst Form = (props) => {\r\n  return (\r\n<form onSubmit={(event) => props.handleUserFormSubmit(event)}>\r\n      <label>\r\n        <p>Search:</p>\r\n        <input name=\"username\"\r\n        type=\"text\"\r\n        placeholder=\"GitHub username\"\r\n        required\r\n        value={props.formData.username}\r\n        onChange={props.handleFormChange}\r\n      />\r\n      </label>\r\n      <div>\r\n      <input\r\n        type=\"submit\"\r\n        value=\"Submit\"\r\n      />\r\n    </div>\r\n    </form>\r\n)};\r\nexport default Form;","/*\n\n\nimport React from 'react';\nimport './App.css';\nimport { Layout , Breadcrumb } from 'antd';\nimport { Typography } from 'antd';\nimport { Input } from 'antd';\nimport { Button } from 'antd';\nimport { TimePicker } from 'antd';\nimport moment from 'moment';\nimport { DatePicker, Space } from 'antd';\n\nfunction onChange(date, dateString) {\n  console.log(date, dateString);\n}\n\n\nconst { Title } = Typography;\n\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Layout>\n      <Header>\n      <Title style={{color:'white'}} level={3}>Disappearing tweets</Title>\n      </Header>\n      <Content style={{ padding: '0 500px' }}>\n      <Breadcrumb style={{ margin: '150px 0' }}>\n      <Input placeholder=\"Basic usage\" />\n      <Button type=\"primary\">Tweet</Button>\n      <TimePicker defaultValue={moment('12:08:23', 'HH:mm:ss')} size=\"large\" />\n      <Space direction=\"vertical\">\n      <DatePicker onChange={onChange} />\n      </Space>\n      </Breadcrumb>\n      </Content>\n      <Footer>Footer</Footer>\n    </Layout>\n    </div>\n  );\n}\n\n\n\n\nexport default App;s\n*/\n\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Form from './components/Form.js';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gitun: 'No username',\n      info: '',\n      formData: {\n        username: '',\n      }\n    }\n    this.handleUserFormSubmit = this.handleUserFormSubmit.bind(this);\n    this.handleFormChange= this.handleFormChange.bind(this);\n  }\nhandleUserFormSubmit(event) {\n    event.preventDefault();\n    axios.get('https://api.github.com/users/'+this.state.formData.username)\n    .then(response => this.setState({\n      gitun: response.data.login,\n      info : JSON.stringify(response.data, undefined, 2)\n    })).catch((err) => { console.log(err); });\n  };\nhandleFormChange(event) {\n    const obj = this.state.formData;\n    obj[event.target.name] = event.target.value;\n    this.setState(obj);\n  };\nrender() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">GitHub Analytics</h1>\n        </header>\n        <p className=\"App-intro\">\n          Watch this space...\n        </p>\n        <Form\n          formData={this.state.formData}\n          handleUserFormSubmit={this.handleUserFormSubmit}\n          handleFormChange={this.handleFormChange}\n        />\n        <p><b>Username:</b></p>\n        <p>{this.state.gitun}</p>\n        <b>Information:</b>\n        <pre>{this.state.info}</pre>\n</div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}